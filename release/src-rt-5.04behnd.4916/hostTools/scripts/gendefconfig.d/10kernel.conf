#!/usr/bin/perl
use strict;
use warnings;
use FindBin qw($Bin);
use lib "$Bin/../../PerlLib";
use BRCM::GenConfig;

# $p will allow us to GET values from the PROFILE
# $c will allow us to SET (and GET and DRIVER_SETUP) on the config
# file as we transform it from a template to the final config

# arguments
# * profile file
# * config  file
my $p    = new BRCM::GenConfig(shift);
my $chip = $p->get('BRCM_CHIP');

my $c = new BRCM::GenConfig( shift, Chip => $chip, Profile => $p );

############################################################
#          KERNEL FEATURES CONFIGURATION                   #
############################################################

$c->set( 'CONFIG_HZ_1000', 'y' );

if ( $p->get('BCM_KERNEL_CMDLINE_BOOL') ) {
    $c->set( 'CONFIG_CMDLINE', $p->get('BCM_KERNEL_CMDLINE') );
    if ( $p->get('BCM_KERNEL_CMDLINE_OVERRIDE') ) {
        $c->set( 'CONFIG_CMDLINE_FORCE', 'y' );
    }
}

$c->set( 'CONFIG_SLUB', 'y' );

if ( $p->get("BCM_DEBUG_KMEM") ) {
    $c->set( "CONFIG_SLUB_DEBUG_ON", "y" );
}

if ( $p->get("BCM_DEBUG_KMEMLEAK") ) {
    $c->set( "CONFIG_DEBUG_KMEMLEAK", "y" );
}

if ( $p->get("BCM_TINY_COREDUMP") ) {
    $c->set( "CONFIG_BCM_TINY_KCORE", "y" );
}

# If we are including debug tools in this build, then make
# the kernel .config file available via /proc/config.gz
# and also enable DEBUG_FS
if ( $p->get('BUILD_DEBUG_TOOLS') ) {
    $c->set( 'CONFIG_IKCONFIG',      'y' );
    $c->set( 'CONFIG_IKCONFIG_PROC', 'y' );
    $c->set( 'CONFIG_DEBUG_FS',      'y' );
}

$c->set( 'CONFIG_BRCM_IKOS',   $p->get('BRCM_IKOS') );
$c->set( 'CONFIG_BCM_ANDROID', $p->get('BRCM_ANDROID') );

if ( ( $p->get('BRCM_DRIVER_PMC') ) ) {
    $c->set( 'CONFIG_BCM_PMC', 'y' );
}

# PINCTRL driver for kernel 4.19 and newer
$c->set( 'CONFIG_BCM_BCA_PINCTRL', 'y' );

#LED controller driver
$c->set( 'CONFIG_BCM_BCA_LED',             'y' );
$c->set( 'CONFIG_LEDS_TRIGGERS',           'y' );
$c->set( 'CONFIG_LEDS_TRIGGER_DEFAULT_ON', 'y' );
$c->set( 'CONFIG_LEDS_TRIGGER_TIMER',      'y' );

$c->set( 'CONFIG_GCC_PLUGINS', 'n' );

$c->set( 'CONFIG_CRYPTO_SHA256',     'y' );
$c->set( 'CONFIG_CRYPTO_LIB_SHA256', 'y' );
$c->set( 'CONFIG_CRYPTO_AES',        'y' );
$c->set( 'CONFIG_CRYPTO_LIB_AES',    'y' );

if ( !( $p->get('BRCM_QEMU') ) ) {
    $c->set( 'CONFIG_BCM_BCA_LEGACY_LED_API', 'y' );
}

if ( $p->get("BRCM_SMC_BOOT") ) {
    $c->set( "CONFIG_BRCM_SMC_BOOT", 'y' );
}

$c->set( 'CONFIG_BCM_OTP_DRV', 'y' );
if ( !( $p->get('BRCM_IKOS') ) ) {
    $c->set( 'CONFIG_BCM_BCA_VREG_SYNC', 'y' );
}
$c->set( 'CONFIG_BCM_STRAP', 'y' );

$c->set( 'CONFIG_BCM_BCA_GPIO',    'y' );
$c->set( 'CONFIG_BCM_BCA_EXTINTR', 'y' );
if ( $chip =~ /^(4908|63138|63148)$/ ) {
    if ( $chip =~ /^(4908)$/ ) {
        $c->set( 'CONFIG_BCM_BCA_EXTINTR_IMPL', '3' );
    }
    else {
        $c->set( 'CONFIG_BCM_BCA_EXTINTR_IMPL', '2' );
    }
}

if ( $chip !~ /^(63138|63148|4908)$/ ) {
    $c->set( "CONFIG_BCM_PCM", 'y' );
}
if ( !( $p->get('BRCM_QEMU') ) ) {
    if ( !( $p->get('BRCM_IKOS') ) ) {
        $c->set( 'CONFIG_BCM_DGASP_DRV', 'y' );
    }
    $c->set( 'CONFIG_BCM_BUTTON',       'y' );
    $c->set( 'CONFIG_INPUT',            'y' );
    $c->set( 'CONFIG_INPUT_EVDEV',      'y' );
    $c->set( 'CONFIG_BCM_RESET_BUTTON', 'y' );
}

if ( $chip =~ /^(6858|6856|6878|6846|6888|68880)$/ ) {
    $c->set( 'CONFIG_BCM_SPIDEV_REV2', 'y' );
}

if ( $p->get('BRCM_VOICE_SUPPORT') ) {
    $c->set( 'CONFIG_BCM_SPIDEV_VOICE', 'y' );
}

if ( $chip =~ /^(6858|4908|63158|6856|63146|4912|6888|6813|6837|68880|6765)$/ ) {
    if ( $chip =~ /^(6858|4908|63158|63146|4912|6813|6765)$/ ) {
        $c->set( 'CONFIG_BCM_CPU_ARCH_NAME', '"armb53"' );
    }
    elsif ( $chip =~ /^(6837|68880)$/ ) {
        $c->set( 'CONFIG_BCM_CPU_ARCH_NAME', '"arma55"' );
    }
    else {
        $c->set( 'CONFIG_BCM_CPU_ARCH_NAME', '"arma53"' );
    }
    $c->set( 'CONFIG_BCM_CPU_ARCH_ABI_NAME', '"aarch64"' );
    $c->set( 'CONFIG_FRAME_POINTER',         'y' );
    $c->set( 'CONFIG_NR_CPUS',               '4' );           # exist

    if ( $chip =~ /^(6858)$/ ) {
        $c->set( 'CONFIG_BCM96858',                  'y' );
        $c->set( 'CONFIG_BCM_COHERENT_OUTER_SHARED', 'y' );
        $c->set( 'CONFIG_RCU_KTHREAD_PRIO',          '10' );
        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM6858_SIM',   'y' );
            $c->set( 'CONFIG_CMDLINE_FORCE', 'y' );
        }
        $c->set( 'CONFIG_HOTPLUG_CPU', 'y' );
    }

    if ( $chip =~ /^(6888)$/ ) {
        $c->set( 'CONFIG_BCM96888', 'y' );

        #$c->set( 'CONFIG_BCM_COHERENT_OUTER_SHARED', 'y' );
        #$c->set( 'CONFIG_RCU_KTHREAD_PRIO',          '10' );
        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM6888_SIM', 'y' );
        }

        $c->set( 'CONFIG_VFP',   'y' );
        $c->set( 'CONFIG_VFPv3', 'y' );
        $c->set( 'CONFIG_NEON',  'y' );
    }

    if ( $chip =~ /^(6837)$/ ) {
        $c->set( 'CONFIG_BCM96837', 'y' );
        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM6837_SIM', 'y' );
        }
        if ( $p->get('BRCM_SMC_BOOT') ) {
            $c->set( 'CONFIG_BCM_FPM_DRV',                    'y' );
            $c->set( 'CONFIG_BCM_DQM_DRV',                    'y' );
            $c->set( 'CONFIG_BCM_ITC_RPC_DRV',                'y' );
            $c->set( 'CONFIG_BCM_RPC_SERVICES_DRV',           'y' );
            $c->set( 'CONFIG_BCM_VFBIO_DRV',                  'y' );
            $c->set( 'CONFIG_BCM_VFBIO_OOPS',                 'm' );
            $c->set( 'CONFIG_BCM_SMCLOG_DRV',                 'y' );
            $c->set( 'CONFIG_BCM_CPUFREQ',                    'y' );
            $c->set( 'CONFIG_CPU_FREQ',                       'y' );
            $c->set( 'CONFIG_CPU_FREQ_STAT',                  'y' );
            $c->set( 'CONFIG_CPU_FREQ_GOV_CONSERVATIVE',      'y' );
            $c->set( 'CONFIG_CPU_FREQ_GOV_ONDEMAND',          'y' );
            $c->set( 'CONFIG_CPU_FREQ_GOV_POWERSAVE',         'y' );
            $c->set( 'CONFIG_CPU_FREQ_GOV_PERFORMANCE',       'y' );
            $c->set( 'CONFIG_CPU_FREQ_GOV_USERSPACE',         'y' );
            $c->set( 'CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE', 'y' );
            $c->set( 'CONFIG_BCM_EXT_PWR_CTRL_DRV',           'y' );
        }
        $c->set( 'CONFIG_VFP',   'y' );
        $c->set( 'CONFIG_VFPv3', 'y' );
        $c->set( 'CONFIG_NEON',  'y' );
    }

    if ( $chip =~ /^(68880)$/ ) {
        $c->set( 'CONFIG_BCM968880', 'y' );
        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM68880_SIM', 'y' );
        }
        if ( $p->get('BRCM_SMC_BOOT') ) {
            $c->set( 'CONFIG_BCM_FPM_DRV',                    'y' );
            $c->set( 'CONFIG_BCM_DQM_DRV',                    'y' );
            $c->set( 'CONFIG_BCM_ITC_RPC_DRV',                'y' );
            $c->set( 'CONFIG_BCM_RPC_SERVICES_DRV',           'y' );
            $c->set( 'CONFIG_BCM_VFBIO_DRV',                  'y' );
            $c->set( 'CONFIG_BCM_VFBIO_OOPS',                 'm' );
            $c->set( 'CONFIG_BCM_SMCLOG_DRV',                 'y' );
            $c->set( 'CONFIG_BCM_CPUFREQ',                    'y' );
            $c->set( 'CONFIG_CPU_FREQ',                       'y' );
            $c->set( 'CONFIG_CPU_FREQ_STAT',                  'y' );
            $c->set( 'CONFIG_CPU_FREQ_GOV_CONSERVATIVE',      'y' );
            $c->set( 'CONFIG_CPU_FREQ_GOV_ONDEMAND',          'y' );
            $c->set( 'CONFIG_CPU_FREQ_GOV_POWERSAVE',         'y' );
            $c->set( 'CONFIG_CPU_FREQ_GOV_PERFORMANCE',       'y' );
            $c->set( 'CONFIG_CPU_FREQ_GOV_USERSPACE',         'y' );
            $c->set( 'CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE', 'y' );
            $c->set( 'CONFIG_BCM_EXT_PWR_CTRL_DRV',           'y' );
        }

        # unset these to enable sparse memory to support
        # discontinous lower and upper DDR region in 68880
        $c->unset('CONFIG_FLATMEM_MANUAL');
        $c->unset('CONFIG_ARCH_FLATMEM_ENABLE');
        $c->unset('CONFIG_FLATMEM');

        $c->set( 'CONFIG_VFP',   'y' );
        $c->set( 'CONFIG_VFPv3', 'y' );
        $c->set( 'CONFIG_NEON',  'y' );
    }

    if ( $chip =~ /^(6856)$/ ) {
        $c->set( 'CONFIG_ETHERNET',         'y' );
        $c->set( 'CONFIG_NET_VENDOR_INTEL', 'y' );
        $c->set( 'CONFIG_IXGBE',            'm' );
        $c->set( 'CONFIG_BCM96856',         'y' );

        #        $c->set( 'CONFIG_BCM_COHERENT_OUTER_SHARED',   'y' );
        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM6856_SIM',   'y' );
            $c->set( 'CONFIG_CMDLINE_FORCE', 'y' );
        }
    }

    if ( $chip =~ /^(4908)$/ ) {
        $c->set( 'CONFIG_BCM94908', 'y' );
        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM4908_SIM', 'y' );
        }
        if ( $p->get('BRCM_CPU_FREQ_PWRSAVE') ) {
            $c->set( 'CONFIG_BCM_CPUFREQ',                    'y' );
            $c->set( 'CONFIG_CPU_FREQ',                       'y' );
            $c->set( 'CONFIG_CPU_FREQ_STAT',                  'y' );
            $c->set( 'CONFIG_CPU_FREQ_GOV_SCHEDUTIL',         'y' );
            $c->set( 'CONFIG_CPU_FREQ_GOV_INTERACTIVE',       'y' );
            $c->set( 'CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE', 'y' );
        }
    }

    if ( !$p->get('BRCM_QEMU') ) {
        $c->set( 'CONFIG_BCM_THERMAL',           'm' );
        $c->set( 'CONFIG_THERMAL',               'y' );
        $c->set( 'CONFIG_THERMAL_OF',            'y' );
        $c->set( 'CONFIG_THERMAL_GOV_STEP_WISE', 'y' );
        $c->set( 'CONFIG_THERMAL_GOV_BANG_BANG', 'y' );
    }

    if ( $chip =~ /^(4908|63158|63146|4912|6813|6765)$/ ) {
        $c->set( 'CONFIG_HOTPLUG_CPU', 'y' );
    }

    if ( $chip =~ /^(63158)$/ ) {

        $c->set( 'CONFIG_BCM963158', 'y' );

        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM63158_SIM',  'y' );
            $c->set( 'CONFIG_CMDLINE_FORCE', 'y' );
        }
    }
    if ( $chip =~ /^(63146)$/ ) {

        $c->set( 'CONFIG_BCM963146', 'y' );
        $c->set( 'CONFIG_DEBUG_FS',  'y' );
        $c->set( 'CONFIG_NR_CPUS',   '2' );    # exist

        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM63146_SIM',  'y' );
            $c->set( 'CONFIG_CMDLINE_FORCE', 'y' );
        }
    }
    if ( $chip =~ /^(4912)$/ ) {

        $c->set( 'CONFIG_BCM94912', 'y' );

        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM4912_SIM',   'y' );
            $c->set( 'CONFIG_CMDLINE_FORCE', 'y' );
        }
    }
    if ( $chip =~ /^(6813)$/ ) {

        $c->set( 'CONFIG_BCM96813', 'y' );

        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM6813_SIM',   'y' );
            $c->set( 'CONFIG_CMDLINE_FORCE', 'y' );
        }

        # unset these to enable sparse memory to support
        # discontinous lower and upper DDR region in 6813
        $c->unset('CONFIG_FLATMEM_MANUAL');
        $c->unset('CONFIG_ARCH_FLATMEM_ENABLE');
        $c->unset('CONFIG_FLATMEM');
    }

    if ( $chip =~ /^(6765)$/ ) {

        $c->set( 'CONFIG_BCM96765', 'y' );

        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM6765_SIM',   'y' );
            $c->set( 'CONFIG_CMDLINE_FORCE', 'y' );
        }
        $c->unset('CONFIG_FLATMEM_MANUAL');
        $c->unset('CONFIG_ARCH_FLATMEM_ENABLE');
        $c->unset('CONFIG_FLATMEM');
    }

    $c->set( 'CONFIG_HIGHMEM', 'y' );
    if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
        $c->set( 'CONFIG_EXT2_FS',    'y' );
        $c->set( 'CONFIG_KALLSYMS',   'y' );
        $c->set( 'CONFIG_DEBUG_INFO', 'y' );
    }
    else {
        $c->set( 'CONFIG_ARCH_SPARSEMEM_ENABLE', 'y' );
    }

    $c->set( 'CONFIG_64BIT',                    'y' );
    $c->set( 'CONFIG_ARCH_PHYS_ADDR_T_64BIT',   'y' );
    $c->set( 'CONFIG_ARM_GIC_V3',               'y' );
    $c->set( 'CONFIG_ZONE_DMA',                 'y' );
    $c->set( 'CONFIG_ARCH_DMA_ADDR_T_64BIT',    'y' );
    $c->set( 'CONFIG_SWIOTLB',                  'y' );
    $c->set( 'CONFIG_IOMMU_HELPER',             'y' );
    $c->set( 'CONFIG_PGTABLE_LEVELS',           '3' );
    $c->set( 'CONFIG_GENERIC_IRQ_SHOW_LEVEL',   'y' );
    $c->set( 'CONFIG_ARCH_HAS_TICK_BROADCAST',  'y' );
    $c->set( 'CONFIG_TICK_CPU_ACCOUNTING',      'y' );
    $c->set( 'CONFIG_PREEMPT_COUNT',            'y' );
    $c->set( 'CONFIG_ARM_AMBA',                 'y' );
    $c->set( 'CONFIG_DTC',                      'y' );
    $c->set( 'CONFIG_OF',                       'y' );
    $c->set( 'CONFIG_OF_FLATTREE',              'y' );
    $c->set( 'CONFIG_OF_EARLY_FLATTREE',        'y' );
    $c->set( 'CONFIG_OF_ADDRESS',               'y' );
    $c->set( 'CONFIG_OF_IRQ',                   'y' );
    $c->set( 'CONFIG_OF_RESERVED_MEM',          'y' );
    $c->set( 'CONFIG_CLKSRC_OF',                'y' );
    $c->set( 'CONFIG_ARM_ARCH_TIMER',           'y' );
    $c->set( 'CONFIG_ARM_ARCH_TIMER_EVTSTREAM', 'y' );
    $c->set( 'CONFIG_IRQCHIP',                  'y' );

    # 32 bit app compatibility
    $c->set( 'CONFIG_COMPAT',   'y' );
    $c->set( 'CONFIG_UID16',    'y' );
    $c->set( "CONFIG_ELF_CORE", 'y' );

    # also defined for other chips
    $c->set( 'CONFIG_NEED_DMA_MAP_STATE',            'y' );    # exist in 63138
    $c->set( 'CONFIG_GENERIC_CLOCKEVENTS',           'y' );    # exist in 63138
    $c->set( 'CONFIG_GENERIC_CLOCKEVENTS_BROADCAST', 'y' );    # exist in 63138

    # not set in other chips
    $c->set( 'CONFIG_NO_IOPORT_MAP',             'y' );
    $c->set( 'CONFIG_GENERIC_CSUM',              'y' );
    $c->set( 'CONFIG_HAVE_GENERIC_RCU_GUP',      'y' );
    $c->set( 'CONFIG_NEED_SG_DMA_LENGTH',        'y' );
    $c->set( 'CONFIG_KERNEL_MODE_NEON',          'y' );
    $c->set( 'CONFIG_FIX_EARLYCON_MEM',          'y' );
    $c->set( 'CONFIG_SPARSE_IRQ',                'y' );
    $c->set( 'CONFIG_GENERIC_TIME_VSYSCALL',     'y' );
    $c->set( 'CONFIG_NO_HZ_COMMON',              'y' );
    $c->set( 'CONFIG_NO_HZ_IDLE',                'y' );
    $c->set( 'CONFIG_HW_PERF_EVENTS',            'y' );
    $c->set( 'CONFIG_SYS_SUPPORTS_HUGETLBFS',    'y' );
    $c->set( 'CONFIG_ARCH_WANT_GENERAL_HUGETLB', 'y' );
    $c->set( 'CONFIG_ARCH_WANT_HUGE_PMD_SHARE',  'y' );
    $c->set( 'CONFIG_ARCH_HAS_CACHE_LINE_SIZE',  'y' );
    $c->set( 'CONFIG_HAVE_MEMBLOCK',             'y' );
    $c->set( 'CONFIG_NO_BOOTMEM',                'y' );
    $c->set( 'CONFIG_PAGEFLAGS_EXTENDED',        'y' );
    $c->set( 'CONFIG_COMPACTION',                'y' );
    $c->set( 'CONFIG_MIGRATION',                 'y' );
    $c->set( 'CONFIG_PHYS_ADDR_T_64BIT',         'y' );
    $c->set( 'CONFIG_BOUNCE',                    'y' );
    $c->set( 'CONFIG_KSM',                       'y' );
    $c->set( 'CONFIG_GENERIC_EARLY_IOREMAP',     'y' );
    $c->set( 'HAVE_ARCH_TRANSPARENT_HUGEPAGE',   'y' );
    $c->set( 'CONFIG_BCM_ARM_CPUIDLE',           'y' );
    $c->set( 'CONFIG_BCM_COMMON_CLK',            'y' );
    $c->set( 'CONFIG_ARM64_SW_TTBR0_PAN',        'y' );

    # taken from another chips
    $c->set( 'CONFIG_BCM_KERNEL_CUSTOM',              'y' );
    $c->set( 'CONFIG_GENERIC_CLOCKEVENTS_BUILD',      'y' );
    $c->set( 'CONFIG_HAVE_FUNCTION_TRACER',           'y' );
    $c->set( 'CONFIG_HAVE_FUNCTION_GRAPH_TRACER',     'y' );
    $c->set( 'CONFIG_HAVE_DYNAMIC_FTRACE',            'y' );
    $c->set( 'CONFIG_HAVE_FTRACE_MCOUNT_RECORD',      'y' );
    $c->set( 'CONFIG_HAVE_C_RECORDMCOUNT',            'y' );
    $c->set( 'CONFIG_TRACING_SUPPORT',                'y' );
    $c->set( 'CONFIG_HAVE_ARCH_KGDB',                 'y' );
    $c->set( 'CONFIG_ARM_UNWIND',                     'y' );
    $c->set( 'CONFIG_DEBUG_USER',                     'y' );
    $c->set( 'CONFIG_DEBUG_LL',                       'y' );
    $c->set( 'CONFIG_CMDLINE_EXTEND',                 'y' );
    $c->set( 'CONFIG_DEBUG_LL_UART_NONE',             'y' );
    $c->set( 'CONFIG_EARLY_PRINTK',                   'y' );
    $c->set( 'CONFIG_SERIAL_CORE',                    'y' );
    $c->set( 'CONFIG_SERIAL_CORE_CONSOLE',            'y' );
    $c->set( 'CONFIG_SQUASHFS_XZ',                    'y' );
    $c->set( 'CONFIG_SQUASHFS_ZLIB',                  'y' );
    $c->set( 'CONFIG_FUTEX',                          'y' );
    $c->set( 'CONFIG_RCU_CPU_STALL_TIMEOUT',          '60' );
    $c->set( 'CONFIG_FRAME_WARN',                     '2048' );
    $c->set( 'CONFIG_ARCH_SUSPEND_POSSIBLE',          'y' );
    $c->set( 'CONFIG_ARCH_BINFMT_ELF_RAMDOMIZE_PIE',  'y' );
    $c->set( 'CONFIG_HAVE_AOUT',                      'y' );
    $c->set( 'CONFIG_USE_GENERIC_SMP_HELPERS',        'y' );
    $c->set( 'CONFIG_HAVE_REGS_AND_STACK_ACCESS_API', 'y' );
    $c->set( 'CONFIG_HAVE_CLK',                       'y' );
    $c->set( 'CONFIG_RT_MUTEXES',                     'y' );
    $c->set( 'CONFIG_SWAP',                           'y' );
    $c->set( 'CONFIG_HAVE_MEMBLOCK',                  'y' );
    $c->set( 'CONFIG_PAGEFLAGS_EXTENDED',             'y' );
    $c->set( 'CONFIG_VIRT_TO_BUS',                    'y' );
    $c->set( 'CONFIG_NEED_DMA_MAP_STATE',             'y' );
    $c->set( 'CONFIG_RCU_FANOUT',                     '64' );
    $c->set( 'CONFIG_CPU_LITTLE_ENDIAN',              'y' );
    $c->set( 'CONFIG_CPU_BIG_ENDIAN',                 undef );

    # unset these to enable sparse memory to support
    # discontinous lower and upper DDR region
    $c->unset('CONFIG_FLATMEM_MANUAL');
    $c->unset('CONFIG_ARCH_FLATMEM_ENABLE');
    $c->unset('CONFIG_FLATMEM');

    # Enable KASLR
    if ( $p->get('BUILD_KASLR') ) {
        $c->set( 'CONFIG_RANDOMIZE_BASE', 'y' );
    }
}

elsif ( $chip =~ /^(63138|63148|47622|63178|6846|6878|6855|6756|6766|6764)$/ ) {
    if ( $chip =~ /^(47622|63178|6846|6878|6855|6756|6766|6764)$/ ) {
        $c->set( 'CONFIG_BCM_THERMAL',           'm' );
        $c->set( 'CONFIG_THERMAL',               'y' );
        $c->set( 'CONFIG_THERMAL_OF',            'y' );
        $c->set( 'CONFIG_THERMAL_GOV_STEP_WISE', 'y' );
        $c->set( 'CONFIG_THERMAL_GOV_BANG_BANG', 'y' );
        if ( $chip =~ /^(47622|63178|6766|6764)$/ ) {
            $c->set( 'CONFIG_HOTPLUG_CPU', 'y' );
        }
    }

    if ( $p->get("BRCM_SPECTRE_PATCH_ENABLE") ) {
        $c->set( 'CONFIG_HARDEN_BRANCH_PREDICTOR',  'y' );
        $c->set( 'CONFIG_BCM_SPECTRE_PATCH_ENABLE', 'y' );
    }

    $c->set( "CONFIG_ARCH_MULTIPLATFORM", 'y' );

    $c->set( 'CONFIG_BOARD_ZRELADDR',                 '0x00008000' );
    $c->set( 'CONFIG_BOARD_PARAMS_PHYS',              '0x00000000' );
    $c->set( 'CONFIG_BCM_KERNEL_CUSTOM',              'y' );
    $c->set( 'CONFIG_EXPERT',                         'y' );
    $c->set( 'CONFIG_GENERIC_CLOCKEVENTS_BUILD',      'y' );
    $c->set( 'CONFIG_GENERIC_CLOCKEVENTS',            'y' );
    $c->set( 'CONFIG_GENERIC_CLOCKEVENTS_BROADCAST',  'y' );
    $c->set( 'CONFIG_HAVE_FUNCTION_TRACER',           'y' );
    $c->set( 'CONFIG_HAVE_FUNCTION_GRAPH_TRACER',     'y' );
    $c->set( 'CONFIG_HAVE_DYNAMIC_FTRACE',            'y' );
    $c->set( 'CONFIG_HAVE_FTRACE_MCOUNT_RECORD',      'y' );
    $c->set( 'CONFIG_HAVE_C_RECORDMCOUNT',            'y' );
    $c->set( 'CONFIG_TRACING_SUPPORT',                'y' );
    $c->set( 'CONFIG_HAVE_ARCH_KGDB',                 'y' );
    $c->set( 'CONFIG_ARM_UNWIND',                     'y' );
    $c->set( 'CONFIG_DEBUG_USER',                     'y' );
    $c->set( 'CONFIG_DEBUG_LL',                       'y' );
    $c->set( 'CONFIG_CMDLINE_EXTEND',                 'y' );
    $c->set( 'CONFIG_DEBUG_LL_UART_NONE',             'y' );
    $c->set( 'CONFIG_EARLY_PRINTK',                   'y' );
    $c->set( 'CONFIG_SERIAL_CORE',                    'y' );
    $c->set( 'CONFIG_SERIAL_CORE_CONSOLE',            'y' );
    $c->set( 'CONFIG_SQUASHFS_XZ',                    'y' );
    $c->set( 'CONFIG_SQUASHFS_ZLIB',                  'y' );
    $c->set( 'CONFIG_FUTEX',                          'y' );
    $c->set( 'CONFIG_RCU_CPU_STALL_TIMEOUT',          '60' );
    $c->set( 'CONFIG_FRAME_WARN',                     '2048' );
    $c->set( 'CONFIG_ARCH_SUSPEND_POSSIBLE',          'y' );
    $c->set( 'CONFIG_ARCH_BINFMT_ELF_RAMDOMIZE_PIE',  'y' );
    $c->set( 'CONFIG_HAVE_AOUT',                      'y' );
    $c->set( 'CONFIG_USE_GENERIC_SMP_HELPERS',        'y' );
    $c->set( 'CONFIG_HAVE_REGS_AND_STACK_ACCESS_API', 'y' );
    $c->set( 'CONFIG_HAVE_CLK',                       'y' );
    $c->set( 'CONFIG_RT_MUTEXES',                     'y' );
    $c->set( 'CONFIG_SWAP',                           'y' );
    $c->set( 'CONFIG_HAVE_MEMBLOCK',                  'y' );
    $c->set( 'CONFIG_PAGEFLAGS_EXTENDED',             'y' );
    $c->set( 'CONFIG_VIRT_TO_BUS',                    'y' );
    $c->set( 'CONFIG_NEED_DMA_MAP_STATE',             'y' );
    $c->set( 'CONFIG_RCU_FANOUT',                     '32' );
    $c->set( 'CONFIG_USE_OF',                         'y' );
    $c->set( 'CONFIG_DTC',                            'y' );
    $c->set( 'CONFIG_OF',                             'y' );
    $c->set( 'CONFIG_OF_FLATTREE',                    'y' );
    $c->set( 'CONFIG_OF_EARLY_FLATTREE',              'y' );
    $c->set( 'CONFIG_OF_ADDRESS',                     'y' );
    $c->set( 'CONFIG_OF_IRQ',                         'y' );
    $c->set( 'CONFIG_OF_RESERVED_MEM',                'y' );
    $c->set( 'CONFIG_BCM_COMMON_CLK',                 'y' );
    if ( $chip =~ /^(63138)$/ ) {
        $c->set( 'CONFIG_BCM_CPU_ARCH_NAME',     '"arma9"' );
        $c->set( 'CONFIG_BCM_CPU_ARCH_ABI_NAME', '"arm32"' );
        $c->set( 'CONFIG_BCM963138',             'y' );
        $c->set( 'CONFIG_NR_CPUS',               '2' );
        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM63138_SIM', 'y' );
        }
        $c->set( 'CONFIG_BCM_ARM_CPUIDLE', 'y' );
    }
    if ( $chip =~ /^(63148)$/ ) {
        $c->set( 'CONFIG_BCM_CPU_ARCH_NAME',     '"armb15"' );
        $c->set( 'CONFIG_BCM_CPU_ARCH_ABI_NAME', '"arm32"' );
        $c->set( 'CONFIG_BCM963148',             'y' );
        $c->set( 'CONFIG_NR_CPUS',               '2' );
        $c->set( 'CONFIG_HIGHMEM',               'y' );

        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM63148_SIM', 'y' );
        }
        $c->set( 'CONFIG_VFP',             'y' );
        $c->set( 'CONFIG_VFPv3',           'y' );
        $c->set( 'CONFIG_NEON',            'y' );
        $c->set( 'CONFIG_BCM_ARM_CPUIDLE', 'y' );
        $c->set( 'CONFIG_BCM_B15_CPUIDLE', 'y' );
        $c->unset('CONFIG_CACHE_L2X0');
    }
    if ( $chip =~ /^(6846)$/ ) {
        $c->set( 'CONFIG_BCM96846', 'y' );
        $c->unset('CONFIG_CACHE_L2X0');
        $c->unset('CONFIG_PLAT_CA9_MPCORE');
        $c->unset('CONFIG_BCM_B15_MEGA_BARRIER');
        $c->unset('CONFIG_PLAT_B15_CORE');
        $c->unset('CONFIG_DEBUG_LL');
        $c->unset('CONFIG_EARLY_PRINTK');
        $c->set( 'CONFIG_BCM_CPU_ARCH_NAME',     '"arma7"' );
        $c->set( 'CONFIG_BCM_CPU_ARCH_ABI_NAME', '"arm32"' );
        $c->set( 'CONFIG_NR_CPUS',               '2' );
        $c->unset('CONFIG_ATAGS');

        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM6846_SIM', 'y' );
        }
        $c->set( 'CONFIG_BCM_ARM_CPUIDLE', 'y' );
    }
    if ( $chip =~ /^(6878)$/ ) {
        $c->set( 'CONFIG_BCM96878', 'y' );
        $c->set( 'CONFIG_NR_CPUS',  '2' );
        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM6878_SIM', 'y' );
        }
        $c->set( 'CONFIG_BCM_CPU_ARCH_NAME',     '"arma7"' );
        $c->set( 'CONFIG_BCM_CPU_ARCH_ABI_NAME', '"arm32"' );
        $c->unset('CONFIG_ATAGS');
        $c->unset('CONFIG_CACHE_L2X0');
        $c->set( 'CONFIG_BCM_ARM_CPUIDLE', 'y' );
    }
    if ( $chip =~ /^(6855)$/ ) {
        $c->set( 'CONFIG_BCM96855', 'y' );
        $c->set( 'CONFIG_NR_CPUS',  '3' );
        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM6855_SIM', 'y' );
        }

        $c->set( 'CONFIG_VFP',   'y' );
        $c->set( 'CONFIG_VFPv3', 'y' );
        $c->set( 'CONFIG_NEON',  'y' );

        $c->set( 'CONFIG_BCM_CPU_ARCH_NAME',     '"arma7"' );
        $c->set( 'CONFIG_BCM_CPU_ARCH_ABI_NAME', '"arm32"' );
        $c->unset('CONFIG_ATAGS');
        $c->unset('CONFIG_CACHE_L2X0');
        $c->set( 'CONFIG_BCM_ARM_CPUIDLE', 'y' );
        $c->set( 'CONFIG_HIGHMEM',         'y' );
        $c->set( 'CONFIG_VMSPLIT_3G_OPT',  'y' );
    }
    if ( $chip =~ /^(47622)$/ ) {
        $c->set( 'CONFIG_BCM947622', 'y' );
        $c->set( 'CONFIG_NR_CPUS',   '4' );
        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM47622_SIM', 'y' );
        }
        $c->set( 'CONFIG_VFP',   'y' );
        $c->set( 'CONFIG_VFPv3', 'y' );
        $c->set( 'CONFIG_NEON',  'y' );
    }
    if ( $chip =~ /^(63178)$/ ) {
        $c->set( 'CONFIG_BCM963178', 'y' );
        $c->set( 'CONFIG_NR_CPUS',   '3' );
        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM63178_SIM', 'y' );
        }
        $c->set( 'CONFIG_VFP',   'y' );
        $c->set( 'CONFIG_VFPv3', 'y' );
        $c->set( 'CONFIG_NEON',  'y' );
    }
    if ( $chip =~ /^(6756)$/ ) {
        $c->set( 'CONFIG_BCM96756', 'y' );
        $c->set( 'CONFIG_NR_CPUS',  '4' );
        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM6756_SIM', 'y' );
        }
        $c->set( 'CONFIG_VFP',   'y' );
        $c->set( 'CONFIG_VFPv3', 'y' );
        $c->set( 'CONFIG_NEON',  'y' );
    }
    if ( $chip =~ /^(6766)$/ ) {
        $c->set( 'CONFIG_VFP',      'y' );
        $c->set( 'CONFIG_VFPv3',    'y' );
        $c->set( 'CONFIG_NEON',     'y' );
        $c->set( 'CONFIG_BCM96766', 'y' );

        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM6766_SIM',   'y' );
            $c->set( 'CONFIG_CMDLINE_FORCE', 'y' );
        }

        if ( $p->get('BRCM_KERNEL_LPAE') ) {
            $c->set( 'CONFIG_ARM_LPAE', 'y' );
        }
    }
    if ( $chip =~ /^(6764)$/ ) {
        $c->set( 'CONFIG_VFP',      'y' );
        $c->set( 'CONFIG_VFPv3',    'y' );
        $c->set( 'CONFIG_NEON',     'y' );
        $c->set( 'CONFIG_BCM96764', 'y' );

        if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
            $c->set( 'CONFIG_BCM6764_SIM',   'y' );
            $c->set( 'CONFIG_CMDLINE_FORCE', 'y' );
        }

        if ( $p->get('BRCM_KERNEL_LPAE') ) {
            $c->set( 'CONFIG_ARM_LPAE', 'y' );
        }
    }
    if (   $chip =~ /^(47622)$/
        or $chip =~ /^(63178)$/
        or $chip =~ /^(6756)$/
        or $chip =~ /^(6766)$/
        or $chip =~ /^(6764)$/ )
    {
        $c->set( 'CONFIG_BCM_CPU_ARCH_NAME',     '"arma7"' );
        $c->set( 'CONFIG_BCM_CPU_ARCH_ABI_NAME', '"arm32"' );
        $c->unset('CONFIG_ATAGS');
        $c->set( 'CONFIG_BCM_ARM_CPUIDLE', 'y' );
        $c->set( 'CONFIG_HIGHMEM',         'y' );
        $c->unset('CONFIG_CACHE_L2X0');
    }
    if ( $p->get('BRCM_BOARD_ID') eq "\"ikos\"" ) {
        $c->set( 'CONFIG_CMDLINE_FORCE', 'y' );
        $c->set( 'CONFIG_EXT2_FS',       'y' );
        $c->set( 'CONFIG_KALLSYMS',      'y' );
        $c->set( 'CONFIG_DEBUG_INFO',    'y' );
        $c->unset('CONFIG_BCM_CPUFREQ');
    }
    $c->set( 'CONFIG_CPU_LITTLE_ENDIAN', 'y' );
    $c->set( 'CONFIG_CPU_BIG_ENDIAN',    undef );
    $c->set( 'CONFIG_LBDAF',             'y' );

    if ( $p->get('BRCM_CPU_FREQ_PWRSAVE') ) {
        $c->set( 'CONFIG_BCM_CPUFREQ',                    'y' );
        $c->set( 'CONFIG_CPU_FREQ',                       'y' );
        $c->set( 'CONFIG_CPU_FREQ_STAT',                  'y' );
        $c->set( 'CONFIG_CPU_FREQ_GOV_SCHEDUTIL',         'y' );
        $c->set( 'CONFIG_CPU_FREQ_GOV_INTERACTIVE',       'y' );
        $c->set( 'CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE', 'y' );
    }
}

if ( $chip =~ /^(6838|6848|6858|6846|6856)$/ ) {
    $c->set( 'CONFIG_BCM_BRIDGE_MAC_FDB_LIMIT', 'y' );
    $c->set( 'CONFIG_HW_PERF_EVENTS',           'y' );
}

if ( $chip !~ /^(63138|63148|4908|6878)$/ ) {
    $c->set( 'CONFIG_BCM_GLB_COHERENCY',     'y' );
    $c->set( 'CONFIG_BCM_UBUS_DECODE_REMAP', 'y' );
    if ( $chip eq '6858' ) {

        # In 6858 FPM pool memory have to be non-coherent since
        # CCI-400 isn't able to sustain 10G traffic
        $c->set( 'CONFIG_BCM_FPM_COHERENCY_EXCLUDE', 'y' );
    }
}

if ( $p->get("BUILD_STANDARD_SPI_DRIVER") ) {
    if ( $chip =~ /^(4912|6756|6765|6766|6764|6855|6813|68880|6837)$/ ) {
        $c->set( "CONFIG_SPI_BCMBCA_HSSPI", 'y' );
    }
    else {
        $c->set( "CONFIG_SPI_BCM63XX_HSSPI", 'y' );
    }
    $c->set( "CONFIG_SPI_SPIDEV", 'y' );
}

if ( $p->get("BUILD_SECURE_MONITOR") ) {
    $c->set( "CONFIG_ARM_PSCI", "y" );

    # Needed to enable PSCI method in device tree
    $c->set( "CONFIG_BCM_PSCI",                   "y" );
    $c->set( "CONFIG_BCM_KERNEL_CODE_PROTECTION", "y" );
}

if ( $p->get("BCM_OPTEE") ) {
    $c->set( "CONFIG_TEE",   "y" );
    $c->set( "CONFIG_OPTEE", "y" );
    if ( $p->get("BCM_KERNEL_CODE_PROTECTION") ) {
        $c->set( "CONFIG_BCM_KERNEL_CODE_PROTECTION", "y" );
    }
}

$c->set( 'CONFIG_MULTIUSER',                  'y' );
$c->set( 'CONFIG_UEVENT_HELPER',              'y' );
$c->set( 'CONFIG_UEVENT_HELPER_PATH',         '"/sbin/hotplug"' );
$c->set( 'CONFIG_PANIC_TIMEOUT',              '5' );
$c->set( 'CONFIG_PANIC_ON_OOPS',              'y' );
$c->set( 'CONFIG_LOCKUP_DETECTOR',            'y' );
$c->set( 'CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC', 'y' );

$c->set( 'CONFIG_OVERLAY_FS', $p->get('BRCM_KERNEL_OVERLAYFS') );
if ( $p->get('BUILD_BRCM_OPENWRT') ) {
    $c->set( 'CONFIG_SHMEM',                   'y' );
    $c->set( 'CONFIG_LEDS_TRIGGERS',           'y' );
    $c->set( 'CONFIG_LEDS_TRIGGER_DEFAULT_ON', 'y' );
    $c->set( 'CONFIG_LEDS_TRIGGER_GPIO',       'y' );
    $c->set( 'CONFIG_LEDS_TRIGGER_ONESHOT',    'y' );
    $c->set( 'CONFIG_LEDS_TRIGGER_TIMER',      'y' );
    $c->set( 'CONFIG_LEDS_TRIGGER_NETDEV',     'y' );
    $c->set( 'CONFIG_LEDS_TRIGGER_MTD',        'y' );
    $c->set( 'CONFIG_LEDS_TRIGGER_PANIC',      'y' );
}

if ( $p->get('BUILD_BRCM_AIRIQ') ) {
    $c->set( 'CONFIG_BCM_AIRIQ', 'y' );
    $c->set( 'CONFIG_EPOLL',     'y' );
    $c->set( 'CONFIG_EXPERT',    'y' );
}

if ( $p->get('BUILD_BRCM_HOSTAPD') ) {
    $c->set( 'CONFIG_BCM_HOSTAPD', 'y' );
}

if ( $p->get('BUILD_MTD_OOPS') ) {
    $c->set( "CONFIG_MTD_OOPS", 'm' );
}

# Disable for now
#if ( $p->get('BUILD_MMC_OOPS') ) {
#    $c->set( "CONFIG_MMC_OOPS", 'y' );
#}

if ( $p->get('BUILD_KASAN') ) {
    $c->set( 'CONFIG_SLUB_DEBUG',    'y' );
    $c->set( 'CONFIG_CONSTRUCTORS',  'y' );
    $c->set( 'CONFIG_STACKDEPOT',    'y' );
    $c->set( 'CONFIG_KASAN',         'y' );
    $c->set( 'CONFIG_KASAN_OUTLINE', 'y' );
    $c->set( 'CONFIG_STACKTRACE',    'y' );
    $c->set( 'CONFIG_FRAME_WARN',    '0' );
}

if ( $p->get('BUILD_ARM_PLTS') ) {
    $c->set( "CONFIG_ARM_MODULE_PLTS", 'y' );
}

if ( $p->get('BRCM_KERNEL_BONDING') ) {
    $c->set( 'CONFIG_BONDING', 'm' );
}

if ( $p->get('BRCM_RUNNER_FLOODING') ) {
    $c->set( 'CONFIG_RUNNER_FLOODING', 'y' );
}

if ( $p->get('BUILD_LINUX_PERF') ) {
    $c->set( 'CONFIG_PERF_EVENTS',     'y' );
    $c->set( "CONFIG_HIGH_RES_TIMERS", 'y' );
    $c->set( "CONFIG_KPROBES",         "y" );
    $c->set( "CONFIG_UPROBES",         "y" );

    if ( $chip =~ /^(63138|63148|6846|47622|63178|6756)$/ ) {
        $c->set( 'CONFIG_HW_PERF_EVENTS', 'y' );
    }
}

#Enable CMA reserve memory
$c->set( 'CONFIG_DMA_CMA',         'y' );
$c->set( 'CONFIG_CMA',             'y' );
$c->set( 'CONFIG_CMA_SIZE_MBYTES', '0' );
$c->set( 'CONFIG_BCM_CMA_RSVMEM',  'y' );

if ( $p->get('BUILD_HND_EAP') ) {
    $c->set( 'CONFIG_BCM_HND_EAP', 'y' );

    # If running dongle, eap builds need 128MB of CMA
    # for HMO (host memory offload)
    if ( !$p->get('BUILD_HND_NIC') ) {
        $c->set( 'CONFIG_CMA_ALIGNMENT',   '12' );
        $c->set( 'CONFIG_CMA_SIZE_MBYTES', '128' );
    }
}

if ( ( $p->get('BRCM_QEMU') ) ) {
    $c->set( 'CONFIG_BCM_ARM_CPUIDLE', 'n' );
}

if ( $p->get('BUILD_LINUX_GCOV') ) {
    $c->set( 'CONFIG_GCOV_KERNEL', 'y' );
    $c->set( 'CONFIG_DEBUG_FS',    'y' );
}

# kernel hardenning options
$c->set( 'CONFIG_STACKPROTECTOR_STRONG',  'y' );
$c->set( 'CONFIG_PAGE_POISONING',         'y' );
$c->set( 'CONFIG_SLAB_FREELIST_RANDOM',   'y' );
$c->set( 'CONFIG_SLAB_FREELIST_HARDENED', 'y' );
$c->set( 'CONFIG_HARDENED_USERCOPY',      'y' );
if ( $p->get('BUILD_UBSAN') ) {
    $c->set( 'CONFIG_UBSAN', 'y' );
}
$c->set( 'CONFIG_SCHED_STACK_END_CHECK',  'y' );
$c->set( 'CONFIG_BUG_ON_DATA_CORRUPTION', 'y' );
$c->set( 'CONFIG_DEBUG_WX',               'y' );
$c->set( 'CONFIG_SYN_COOKIES',            'y' );
$c->set( 'CONFIG_FORTIFY_SOURCE',         'y' );
$c->set( 'CONFIG_DEFAULT_MMAP_MIN_ADDR',  '32768' );
$c->unset('CONFIG_SLAB_MERGE_DEFAULT');

# TBD options
#$c->set( 'CONFIG_SECURITY_DMESG_RESTRICT',       'y' );

$c->write();
