#
# This makefile is included by most of the lower level makefiles
# to suck in the common defines.
#

ifeq ($(OS),Windows_NT)
	OS_PLATFORM = cyg
    ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
        #64 bit
    endif
    ifeq ($(PROCESSOR_ARCHITECTURE),x86)
        #32 bit
    endif
else
    OS_PLATFORM = linux
    ifeq ("$(CMAKE_FW_BUILD)", "y")
        include $(TOP_DIR)/make.cmake
    endif
endif

# In release branch below value should be change to "yes"
# In release branch:
# 1. tools are not built (exe files are taken from "rdp/tools" local directory)
# 2. table manager is taken from local directory "rdp/tools/xrdp_table/manager"

REL_BRANCH ?= yes

GEN ?= 3
RGEN ?= $(GEN)
LLVM_VER ?= 3.9.1
FW_CHECK ?= y
RUNNER_FW := runner_fw
RUNNER_C_FW := runner_c_fw

FIRMWARE_DIR ?= $(TOP_DIR)/firmware
DRIVERS_DIR := $(TOP_DIR)/drivers
PROJECTS_DIR := $(TOP_DIR)/projects
PROJECT_DIR := $(PROJECTS_DIR)/$(PROJECT)

ifeq ("$(REL_BRANCH)", "no")
BUILD_TOOLS ?= yes
TOOLS_DIR := $(TOP_DIR)/../tools
else
BUILD_TOOLS ?= no
TOOLS_DIR := $(TOP_DIR)/tools
endif

TOOLS_BIN := $(TOOLS_DIR)/bin
SIM_DIR := $(TOOLS_DIR)/src/Sim
ASM_TOOLS_DIR := $(TOOLS_DIR)/src/AsmTools/
PROJ_XRDP_DEBUG := $(FIRMWARE_DIR)/xrdp_debug
TARGET := target$(BLD)

RDP_PROJ = Rdp$(GEN)G

include $(PROJECT_DIR)/make.proj_flags
ifneq ("$(QEMU)", "y")
ifneq ($(findstring ___$(strip $(PROJECT))___,___PON_6858_FC___PON_6846_FC___PON_6856_FC___PON_6878_FC___),)
include $(TOP_DIR)/make.rdp_sim_impl1
endif
endif

ifneq ($(findstring __$(strip $(PROJECT))__,__DSL_63158__BCM63146__PON_6855_FC__BCM4912__BCM6813__BCM6813_FPI__PON_6888_FC__PON_6888_G9991__PON_6837_FC__PON_6888_B0_FC__),)
include $(TOP_DIR)/make.rdp_sim_impl2
endif


ifeq ($(GEN),4)
ifeq ("$(REL_BRANCH)", "no")
TABLE_MANAGER_DIR := $(TOOLS_DIR)/xrdp_table_manager
else
TABLE_MANAGER_DIR := $(TOP_DIR)/tools/xrdp_table_manager
endif
FW_IMAGES := $(addprefix $(RUNNER_FW)_, $(NUM_FW_IMAGES))
FW_IMAGES := $(addsuffix _4G, $(FW_IMAGES))
ifneq ("$(NUM_C_FW_IMAGES)", "")
   C_FW_IMAGES := $(addprefix $(RUNNER_C_FW)_, $(NUM_C_FW_IMAGES))
endif
else
TABLE_MANAGER_DIR := $(TOP_DIR)/tools/rdp_table_manager
FW_IMAGES = $(RUNNER_FW)_0_main_a_MAIN_INSTR_SIZE_3G $(RUNNER_FW)_0_pico_c_PICO_INSTR_SIZE_3G $(RUNNER_FW)_1_main_b_MAIN_INSTR_SIZE_3G $(RUNNER_FW)_1_pico_d_PICO_INSTR_SIZE_3G
ifeq ($(OS_PLATFORM),linux)
ACE_EXE = wine $(TOOLS_BIN)/Runner$(RGEN)G/ace_runner.exe
else
ACE_EXE = $(TOOLS_BIN)/Runner$(RGEN)G/ace_runner.exe
endif
endif

RDP_SUBSYSTEM_DIR := $(DRIVERS_DIR)/rdp_subsystem

FW_COMMON_SRC_DIR ?= $(FIRMWARE_DIR)/common
FW_COMMON_UT_DIR := $(TOP_DIR)/ut_common
REINIT_CONTEXT_DIR := $(FW_COMMON_UT_DIR)/reinit_context
FW_SRC_FILES := $(shell find $(FIRMWARE_DIR) -type f -printf "%p ")

RDD_SRC_DIR ?= $(TOP_DIR)/firmware/common/rdd
RDD_SRC_FILES := $(shell find $(RDD_SRC_DIR) -type f -printf "%f ")

BDMF_SRC_DIR := $(TOP_DIR)/drivers/bdmf
BDMF_SRC_SUBDIRS := $(shell find $(BDMF_SRC_DIR) -type d -printf "%P ")
BDMF_SRC_FILES := $(shell find $(BDMF_SRC_DIR) -type f -printf "%P ")
PROJ_BDMF_TARGET := $(PROJECT_DIR)/$(TARGET)/bdmf

RDPA_SRC_DIR := $(TOP_DIR)/drivers/rdpa
RDPA_SRC_FILES := $(shell find $(RDPA_SRC_DIR) -type f -printf "%P ")
PROJ_RDPA_TARGET := $(PROJECT_DIR)/$(TARGET)/rdpa
PROJ_RDPA_GPL_TARGET := $(PROJECT_DIR)/$(TARGET)/rdpa_gpl
PROJ_RDPA_USER_TARGET := $(PROJECT_DIR)/$(TARGET)/rdpa_user

PROJ_RDP_SUBSYS_TARGET := $(PROJECT_DIR)/$(TARGET)/rdp_subsystem
PROJ_FW_TARGET := $(TARGET)/firmware
PROJ_FW_OUTPUT := $(PROJ_FW_TARGET)/fw_output/
BB_ERR := $(PROJECT_DIR)/$(PROJ_FW_TARGET)/bb_errors.txt

ifdef TOOLS_WIN
TOOLS_RUNNER_BIN := $(TOOLS_BIN)/Runner$(RGEN)G/
PORTABLE_TOOLS_RUNNER_BIN := `cygpath -w $(TOOLS_RUNNER_BIN)`
PORTABLE_PROJ_FW_OUTPUT := `cygpath -w $(PROJ_FW_OUTPUT)`
else
TOOLS_RUNNER_BIN := $(TOOLS_BIN)/Runner$(RGEN)G/$(OS_PLATFORM)/
PORTABLE_TOOLS_RUNNER_BIN := $(TOOLS_RUNNER_BIN)
PORTABLE_PROJ_FW_OUTPUT := $(PROJ_FW_OUTPUT)
endif
PROJ_RDD_TARGET := $(PROJECT_DIR)/$(TARGET)/rdd
PROJ_FW := $(PROJECT_DIR)/firmware

ifneq (,$(findstring XRDP_CFE,$(PROJECT)))
PROJ_RDD_SRC := $(PROJECT_DIR)/drivers/rdd/$(PLATFORM)
PROJ_RDD_SRC_ORIG := $(PROJECT_DIR)/drivers/rdd
PROJ_FW_SRC := $(PROJ_FW)/src/$(PLATFORM)
PROJ_FW_BIN := $(PROJECT_DIR)/firmware_bin/$(PLATFORM)
PROJ_FW_SRC_LIST_ORIG := $(PROJECT_DIR)/$(CHIP_TYPE)_fw_sources.list
PROJ_FW_SRC_LIST := $(PROJECT_DIR)/$(TARGET)/$(CHIP_TYPE)_fw_sources.list
else
PROJ_RDD_SRC := $(PROJECT_DIR)/drivers/rdd
PROJ_FW_SRC := $(PROJ_FW)/src
PROJ_FW_BIN := $(PROJECT_DIR)/firmware_bin
PROJ_FW_SRC_LIST_ORIG := $(PROJECT_DIR)/fw_sources.list
PROJ_FW_SRC_LIST := $(PROJECT_DIR)/$(TARGET)/fw_sources.list
endif
PROJ_UT_SRC := $(PROJ_FW)/ut
PROJ_FW_RESOURCE_DOC := $(PROJ_FW)/resource_doc
PROJ_UT_TARGET := $(PROJECT_DIR)/$(TARGET)/ut
ifeq ($(GEN),4)
PROJ_DRV_SRC_LIST_ORIG := $(PROJECT_DIR)/$(CHIP_TYPE)_sources.list
PROJ_DRV_SRC_LIST := $(PROJECT_DIR)/$(TARGET)/$(CHIP_TYPE)_sources.list
PROJ_XML_SRC_LIST := $(PROJECT_DIR)/$(CHIP_TYPE)_xml_sources.list
else
PROJ_DRV_SRC_LIST_ORIG := $(PROJECT_DIR)/sources.list
PROJ_DRV_SRC_LIST := $(PROJECT_DIR)/$(TARGET)/sources.list
PROJ_XML_SRC_LIST := $(PROJECT_DIR)/xml_sources.list
endif
ifdef PROJECT
PROJ_XML_FILES := $(foreach src,$(shell grep "\.xml" $(PROJ_XML_SRC_LIST)), $(src))
HW_DTS = hw_data_structures
HW_HDR_FILE := $(SIM_DIR)/hw/autogen/$(CHIP_TYPE)/$(HW_DTS)_auto.h
HW_XML_FILES = $(SIM_DIR)/hw/$(HW_DTS).xml $(SIM_DIR)/hw/$(CHIP_TYPE)_$(HW_DTS).xml
HW_XML_FILES_ARGS := $(foreach src, $(HW_XML_FILES), $(addprefix -l , $(src)))
CHIP_OUTPUT:=$(TOOLS_DIR)/hal_generator/$(CHIP_TYPE)/output
RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN:=$(RDP_SUBSYSTEM_DIR)/$(PLATFORM)$(CHIP_VER)/autogen
endif
AGH_DONE_COPY = $(TABLE_MANAGER_DIR)/agh_generated
AGH_DONE = $(PROJECT_DIR)/$(TARGET)/agh_generated
PREPARE_RDPA_GPL_LINKS_DONE := $(PROJ_RDPA_GPL_TARGET)/.prepare_rdpa_gpl_links_done
PREPARE_RDPA_USER_LINKS_DONE := $(PROJ_RDPA_USER_TARGET)/.prepare_rdpa_user_links_done
PREPARE_RDP_SUBSYS_LINKS_DONE := $(PROJ_RDP_SUBSYS_TARGET)/.prepare_rdp_subsys_links_done
HOST_PLATFORM_FLAGS ?= -m32 -march=i386

DELIVERIES_DIR := deliveries
TARBALL_DIR := $(DELIVERIES_DIR)/build

SPLIT_LIVENESS := --split-liveness-ranges

FW_INCLUDE_FLAGS := -I$(RDD_SRC_DIR)
RDPA_INCLUDE_FLAGS := -I$(PROJ_BDMF_TARGET)/framework -I$(PROJ_BDMF_TARGET)/system -I$(PROJ_BDMF_TARGET)/system/sim -I$(PROJ_BDMF_TARGET)/shell -I$(TOP_DIR)/arch
RDPA_INCLUDE_FLAGS += -I$(PROJ_RDPA_GPL_TARGET)

ifeq ("$(CONFIG_SYSTEM)", "sim")
RDPA_INCLUDE_FLAGS += -I$(TOP_DIR)/drivers/rdpa/sim
endif

PROJECT_INCLUDE_FLAGS := -I$(PROJ_RDD_TARGET) -I$(PROJ_RDP_SUBSYS_TARGET)

BCMLIBS_INCLUDE_PATH := -I$(TOP_DIR)/../bcmdrivers/opensource/char/bcmlibs/include/ 
BCMLIBS_INCLUDE_PATH += -I$(TOP_DIR)/../shared/opensource/include/bcm963xx 
BCMLIBS_INCLUDE_PATH += -I$(TOP_DIR)/../bcmdrivers/broadcom/include/bcm963xx

COMMON_INCLUDE_FLAGS := $(RDPA_INCLUDE_FLAGS) $(PROJECT_INCLUDE_FLAGS) $(BCMLIBS_INCLUDE_PATH)
COMMON_CFLAGS := $(COMMON_INCLUDE_FLAGS) -c -Wall -Werror -Wvla -g -ggdb -DFIRMWARE_INIT -DFIRMWARE_LITTLE_ENDIAN -DUSE_BDMF_SHELL -DBDMF_SYSTEM_SIM
COMMON_CFLAGS += -Wno-int-in-bool-context -Wno-unused-const-variable -Wno-format-truncation
LD_LIBRARY_PATH = $(TOOLS_DIR)/src/AsmTools/Packages/boost_lib_$(OS_PLATFORM)

CC = gcc$(GCC_VERSION)
GCC_VERSION_MAJOR=$(shell $(CC) -dumpversion | awk -F. '{print $$1}')
GCC_VERSION_MAJOR_GE_9=$(shell test $(GCC_VERSION_MAJOR) -ge 9 && echo -n "y" || echo -n "n")
ifeq ("$(GCC_VERSION_MAJOR_GE_9)", "y")
    COMMON_CFLAGS += -Wno-packed-not-aligned
endif

AR = ar -rcs
ifeq ($(OS_PLATFORM),linux)
PERL ?= perl
HOST_EDITLINE ?= y
else
PERL ?= perl
HOST_EDITLINE ?= n
endif
SED  ?= sed
VALIDATE_FILES ?= sh -c 'while [ $(shell printf '\044')1 ]; do if [ -w $(shell printf '\044')1 ]; then $(PERL) $(TOOLS_BIN)/checkpatch.pl -f $(shell printf '\044')1; RES=$(shell printf '\044')?; if [ $(shell printf '\044')RES -ne 0 ]; then exit $(shell printf '\044')RES; fi; fi; shift; done' _
CP = cp -f
LN = ln -sf
MKDIR = mkdir -p
RM = rm -f
MV = mv -f

# TODO - check if all necessary tools are installed (i.e. gcc, ace, python, perl, gawk, etc.)
prebuild_checks:
	@echo "Prebuild Check..."

# For CMAKE-based build the following targets are generated by cmake
ifneq ("$(CMAKE_FW_BUILD)", "y")

project_prepare_dirs:
	$(MKDIR) $(PROJECT_DIR)/$(PROJ_FW_TARGET)
	$(MKDIR) $(PROJECT_DIR)/$(PROJ_FW_OUTPUT)
	$(MKDIR) $(PROJ_RDD_TARGET)
	$(MKDIR) $(PROJ_RDD_SRC)
	$(MKDIR) $(PROJ_RDD_SRC)/auto/
	$(MKDIR) $(PROJ_RDPA_TARGET)
	$(MKDIR) $(PROJ_RDPA_GPL_TARGET)
	$(MKDIR) $(PROJ_RDPA_GPL_TARGET)/new_ag
	$(MKDIR) $(PROJ_RDPA_USER_TARGET)
	$(MKDIR) $(PROJ_RDPA_USER_TARGET)/new_ag
	$(MKDIR) $(PROJ_UT_TARGET)
	$(MKDIR) $(PROJ_FW_BIN)
	$(MKDIR) $(PROJ_FW_RESOURCE_DOC)
	$(MKDIR) $(PROJ_RDP_SUBSYS_TARGET)
ifneq (,$(findstring XRDP_CFE,$(PROJECT)))
	$(MKDIR) $(PROJ_FW_SRC)/
else
	$(LN) $(FW_COMMON_UT_DIR)/Makefile.proj_ut $(PROJ_UT_TARGET)/Makefile
endif

ifeq ($(GEN),4)
ifdef PROJECT
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/bac_if
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/bbh_rx
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/bbh_tx
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/cnpl
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/dis_reor
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/dma
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/dqm
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/fpm
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/hash
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/natc
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/psram
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/qm
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/rnr
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/rnr_quad
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/sbpm
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/tcam
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/ubus_mstr
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/ubus_slv
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/xlif
	$(MKDIR) $(RDP_SUBSYSTEM_DIR_PROJECT_AUTOGEN)/unimac
endif
endif

prepare_fw_headers: project_prepare_dirs $(PROJ_FW_SRC_LIST)
	$(foreach src,$(shell grep "\.h" $(PROJ_FW_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJECT_DIR)/$(PROJ_FW_TARGET)))

prepare_fw_links: prepare_fw_headers $(PROJ_FW_SRC_LIST)
	$(foreach src,$(shell grep "\.uc" $(PROJ_FW_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJECT_DIR)/$(PROJ_FW_TARGET)))
	$(foreach src,$(shell grep "\.c" $(PROJ_FW_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJECT_DIR)/$(PROJ_FW_TARGET)))
ifeq ($(GEN),4)
ifeq ("$(FW_CHECK)", "y")

ifeq ($(PROJECT),PON_6878_FC)
	$(foreach src,$(shell grep "\.uc" $(PROJ_FW_SRC_LIST)),python $(TOOLS_BIN)/fw_checkpatch.py R1_CHECK_TURN_ON $(TOP_DIR)/$(src))
else
	$(foreach src,$(shell grep "\.uc" $(PROJ_FW_SRC_LIST)),python $(TOOLS_BIN)/fw_checkpatch.py $(TOP_DIR)/$(src))
endif
endif
endif

prepare_rdd_links: $(PROJ_DRV_SRC_LIST)
	$(foreach src,$(shell grep "rdd/Makefile" $(PROJ_DRV_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJ_RDD_TARGET)))
	$(foreach src,$(shell grep "drivers/rdd" $(PROJ_DRV_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJ_RDD_TARGET)))
	$(foreach src,$(shell grep "firmware/.*\.h" $(PROJ_DRV_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJ_RDD_TARGET)))
	$(foreach src,$(shell grep "firmware/.*rdd_.*\.c" $(PROJ_DRV_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJ_RDD_TARGET)))

$(HW_HDR_FILE): $(HW_XML_FILES)
	$(CP) $(TOOLS_BIN)/runner_copyright.h .
	python $(TABLE_MANAGER_DIR)/fmtbl.py \
		$(HW_XML_FILES_ARGS) -F $(SIM_DIR)/hw/autogen/$(CHIP_TYPE) -g -c -b $(TABLE_MANAGER_FLAGS)
	$(RM) runner_copyright.h
	touch $(HW_HDR_FILE)

ifeq ($(BUILD_TOOLS), yes)
hw_dts_gen: $(HW_HDR_FILE)
else
hw_dts_gen:
endif

run_table_manager: $(AGH_DONE)

$(AGH_DONE): $(PROJ_XML_FILES)
	$(CP) $(AGH_DONE_COPY) $(AGH_DONE)
	# XXX: Temporary - use same data_structures.xml for all projects until data_structures.xml is auto-generated from modules
	# XXX: Need to update fmtbl.py to have runner_reg_dump.h outside
	$(CP) $(TABLE_MANAGER_DIR)/runner_reg_dump.h .
	$(CP) $(TOOLS_BIN)/runner_copyright.h .
	python $(TABLE_MANAGER_DIR)/fmtbl.py \
		--ld $(PROJ_XML_SRC_LIST) -F $(PROJ_FW_OUTPUT) -g -c -b $(TABLE_MANAGER_FLAGS)
	$(RM) runner_copyright.h
	$(MV) $(PROJ_FW_OUTPUT)/rdd_*.[ch] $(PROJ_RDD_SRC)/auto/

ifneq (,$(findstring XRDP_CFE,$(PROJECT)))
	-$(MV) $(PROJ_FW_OUTPUT)/auto/rdd_*.[ch] $(PROJ_RDD_SRC)/auto/
	$(MV) $(PROJ_FW_OUTPUT)/$(TABLE_MANAGER_PLATFORM)_maps.html $(PROJ_FW_RESOURCE_DOC)/maps.html
else
	-$(MV) $(PROJ_FW_OUTPUT)/auto/rdd_*.[ch] $(PROJ_RDD_SRC)/auto/
ifeq ($(GEN),4)
	$(MV) $(PROJ_FW_OUTPUT)/$(PLATFORM)_maps.html $(PROJ_FW_RESOURCE_DOC)/maps.html
else
	$(MV) $(PROJ_FW_OUTPUT)/$(PLATFORM)_maps.csv $(PROJ_FW_RESOURCE_DOC)/maps.csv
endif
endif
	$(RM) runner_reg_dump.h
	$(MV) $(PROJ_FW_OUTPUT)/fw_defs_auto.h $(PROJ_FW_SRC)/
	$(MV) $(PROJ_FW_OUTPUT)/fw_runner_defs_auto.h $(PROJ_FW_SRC)/
	@echo $(FW_IMAGES)
	@echo "Done creating auto Files"
	touch $(AGH_DONE)

project_target_prepare: prebuild_checks project_prepare_dirs
	@echo "Done building project target dirs"

firmware: project_target_prepare copy_dlls run_table_manager prepare_fw_links prepare_rdd_links $(C_FW_IMAGES) $(FW_IMAGES) create_labels remove_dlls $(PROJ_FW_SRC_LIST)
	echo "set path ." > $(PROJECT_DIR)/$(PROJ_FW_OUTPUT)/conf_temp.txt
	echo "set path .." >> $(PROJECT_DIR)/$(PROJ_FW_OUTPUT)/conf_temp.txt
	[ -f $(PROJECT_DIR)/$(PROJ_FW_OUTPUT)/conf.txt ] && (grep firmware $(PROJ_FW_SRC_LIST) | rev | cut -d"/" -f2- | rev | sort -u | awk '{print "set path ../../../../../"$$1}' && cat $(PROJECT_DIR)/$(PROJ_FW_OUTPUT)/conf.txt) >> $(PROJECT_DIR)/$(PROJ_FW_OUTPUT)/conf_temp.txt || echo "No conf.txt file! Debugger cannot be used"
	mv $(PROJECT_DIR)/$(PROJ_FW_OUTPUT)/conf_temp.txt $(PROJECT_DIR)/$(PROJ_FW_OUTPUT)/conf.txt
	@echo "Done compiling FW binaries"
ifneq (,$(findstring XRDP_CFE,$(PROJECT)))
	$(MV) $(PROJ_FW_BIN)/rdd_*labels.h $(PROJ_RDD_SRC)/
endif
copy_dlls:
ifneq ($(wildcard $(LD_LIBRARY_PATH)/*.dll),)
	$(CP) $(LD_LIBRARY_PATH)/*.dll .
endif

cp_output:
	$(MAKE) -C $(PROJECT_DIR) $@

$(PROJ_FW_SRC_LIST): $(PROJ_FW_SRC_LIST_ORIG) project_prepare_dirs
	m4 -I $(TOP_DIR) -I $(TOP_DIR)/projects $(PROJ_SRC_LIST_FLAGS) $(PROJ_FW_SRC_LIST_ORIG) | grep -v "^#" | grep '*' | xargs -I __WILDCARD__ sh -c 'cd $(TOP_DIR) && find -L __WILDCARD__ -type f' >$(PROJ_FW_SRC_LIST).temp
	m4 -I $(TOP_DIR) -I $(TOP_DIR)/projects $(PROJ_SRC_LIST_FLAGS) $(PROJ_FW_SRC_LIST_ORIG) | grep -v "^#" | grep -v '*' >>$(PROJ_FW_SRC_LIST).temp
	diff -q $(PROJ_FW_SRC_LIST).temp $(PROJ_FW_SRC_LIST) || mv $(PROJ_FW_SRC_LIST).temp $(PROJ_FW_SRC_LIST)
	rm -f $(PROJ_FW_SRC_LIST).temp

$(PROJ_DRV_SRC_LIST): $(PROJ_DRV_SRC_LIST_ORIG) project_prepare_dirs
	m4 -I $(TOP_DIR) -I $(TOP_DIR)/projects $(PROJ_SRC_LIST_FLAGS) $(PROJ_DRV_SRC_LIST_ORIG) | grep -v "^#" | grep '*' | xargs -I __WILDCARD__ sh -c 'cd $(TOP_DIR) && find -L __WILDCARD__ -type f' >$(PROJ_DRV_SRC_LIST).temp
	m4 -I $(TOP_DIR) -I $(TOP_DIR)/projects $(PROJ_SRC_LIST_FLAGS) $(PROJ_DRV_SRC_LIST_ORIG) | grep -v "^#" | grep -v '*' >>$(PROJ_DRV_SRC_LIST).temp
	diff -q $(PROJ_DRV_SRC_LIST).temp $(PROJ_DRV_SRC_LIST) || mv $(PROJ_DRV_SRC_LIST).temp $(PROJ_DRV_SRC_LIST)
	rm -f $(PROJ_DRV_SRC_LIST).temp

endif # ifneq ("$(CMAKE_FW_BUILD)", "y")

create_labels:
ifeq ($(GEN),4)
	python $(TOP_DIR)/tools/bin/create_tasks_addresses_defs.py $(PROJ_FW_OUTPUT) $(PROJ_FW_BIN) tcam_cmd
endif

remove_dlls:
ifneq ($(wildcard $(LD_LIBRARY_PATH)/*.dll),)
	$(RM) *.dll
endif

rdd: prepare_rdd_links prepare_rdpa_gpl_links
	$(MAKE) -C $(PROJ_RDD_TARGET) PLATFORM=$(PLATFORM) CHIP_TYPE=$(CHIP_TYPE) CONFIG_SYSTEM=sim lib

prepare_bdmf_links:
	$(foreach src,$(BDMF_SRC_SUBDIRS),$(shell $(MKDIR) $(PROJ_BDMF_TARGET)/$(src)))
	$(foreach src,$(BDMF_SRC_FILES),$(shell $(LN) $(BDMF_SRC_DIR)/$(src) $(PROJ_BDMF_TARGET)/$(src)))

bdmf: prepare_rdd_links prepare_bdmf_links
	$(MAKE) -C $(PROJ_BDMF_TARGET) TOP_DIR=$(TOP_DIR) PROJECT_DIR=$(PROJECT_DIR) src=$(PROJ_BDMF_TARGET) BDMF_OUTDIR=$(PROJ_BDMF_TARGET) CONFIG_BDMF_DEBUG=y CONFIG_SYSTEM=sim CONFIG_LIBEDIT=$(HOST_EDITLINE) libbdmf.a bdmf_test
	@echo "Done building BDMF"

prepare_rdpa_links: project_target_prepare $(PROJ_DRV_SRC_LIST)
	$(foreach src,$(shell ls $(PROJECTS_DIR)/make.*objs),$(shell $(LN) $(src) $(PROJ_RDPA_TARGET)))
	$(foreach src,$(shell grep "drivers/rdpa/" $(PROJ_DRV_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJ_RDPA_TARGET)))

rdpa: prepare_rdpa_links prepare_rdpa_user_links rdd rdp_subsys
	$(MAKE) -C $(PROJ_RDPA_TARGET) PLATFORM=$(PLATFORM) CONFIG_BDMF_DEBUG=y CONFIG_SYSTEM=sim CONFIG_EDITLINE=$(HOST_EDITLINE) RDP_TARGET=$(TARGET) sim_all V=1
	@echo "Done building RDPA"

prepare_rdpa_gpl_links: $(PREPARE_RDPA_GPL_LINKS_DONE)

$(PREPARE_RDPA_GPL_LINKS_DONE): project_target_prepare $(PROJ_DRV_SRC_LIST)
	$(foreach src,$(shell grep "drivers/rdpa_gpl/" $(PROJ_DRV_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJ_RDPA_GPL_TARGET)))
	touch $(PREPARE_RDPA_GPL_LINKS_DONE)

prepare_rdpa_user_links: $(PREPARE_RDPA_USER_LINKS_DONE)

$(PREPARE_RDPA_USER_LINKS_DONE): project_target_prepare $(PROJ_DRV_SRC_LIST)
	$(foreach src,$(shell grep "drivers/rdpa_user/" $(PROJ_DRV_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJ_RDPA_USER_TARGET)))
	touch $(PREPARE_RDPA_USER_LINKS_DONE)

prepare_rdp_subsys_links: $(PREPARE_RDP_SUBSYS_LINKS_DONE)

$(PREPARE_RDP_SUBSYS_LINKS_DONE): project_target_prepare $(PROJ_DRV_SRC_LIST)
	$(foreach src,$(shell grep "drivers/rdp_subsystem" $(PROJ_DRV_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJ_RDP_SUBSYS_TARGET)))
	$(foreach src,$(shell grep "firmware_bin/" $(PROJ_DRV_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJ_RDP_SUBSYS_TARGET)))
	$(foreach src,$(shell grep "drivers/rdp_drv/" $(PROJ_DRV_SRC_LIST)),$(shell $(LN) $(TOP_DIR)/$(src) $(PROJ_RDP_SUBSYS_TARGET)))
	touch $(PREPARE_RDP_SUBSYS_LINKS_DONE)

rdp_subsys: prepare_rdp_subsys_links prepare_rdd_links prepare_rdpa_gpl_links
	$(MAKE) -C $(PROJ_RDP_SUBSYS_TARGET) PLATFORM=$(PLATFORM) CHIP_TYPE=$(CHIP_TYPE) CONFIG_SYSTEM=sim lib

prepare_drv_links: prepare_bdmf_links prepare_rdd_links prepare_rdp_subsys_links prepare_rdpa_gpl_links prepare_rdpa_links prepare_rdpa_user_links
	@echo "Done preparing links"

vrf_drivers: firmware drivers

rdp_link: prebuild_checks prepare_drv_links project_target_prepare

# Build all drivers and then copy auto-generate files back to the source tree if there is a diff,
# atomically to enable multiple parallel builds
drivers: bdmf rdp_subsys rdd rdpa $(PROJ_DRV_SRC_LIST)
	@echo "Copying rdpa_gpl AG new files"
	$(foreach src,$(shell grep "^drivers/rdpa_gpl/" $(PROJ_DRV_SRC_LIST)),\
	$(shell test -f $(PROJ_RDPA_GPL_TARGET)/new_ag/$(shell basename $(src)) && \
	rsync -c $(PROJ_RDPA_GPL_TARGET)/new_ag/$(shell basename $(src)) $(TOP_DIR)/$(src)))
	@echo "Copying rdpa_user AG new files"
	$(foreach src,$(shell grep "^drivers/rdpa_user/.*_ag\..*" $(PROJ_DRV_SRC_LIST)),\
	$(shell test -f $(PROJ_RDPA_USER_TARGET)/new_ag/$(shell basename $(src)) && \
	rsync -c $(PROJ_RDPA_USER_TARGET)/new_ag/$(shell basename $(src)) $(TOP_DIR)/$(src)))
	@echo "Done building Drivers"

tarball_prepare_dirs:
	rm -rf $(TARBALL_DIR)
	$(MKDIR) $(TARBALL_DIR)

export TOP_DIR FIRMWARE_DIR DRIVERS_DIR TOOLS_DIR TOOLS_BIN PROJECT PROJECT_DIR \
	SPLIT_LIVENESS PROJ_FW_OUTPUT PROJ_FW_SRC PROJ_UT_SRC PROJ_UT_TARGET OPT TOOLS_WIN

sim:
ifeq ($(BUILD_TOOLS), yes)
	$(MAKE) -C $(TOOLS_DIR) GEN=$(GEN) RGEN=$(RGEN) HAS_VERILATED_CORE=$(HAS_VERILATED_CORE) sim CHIP_TYPE=$(CHIP_TYPE)
endif

coverage:
ifeq ($(BUILD_TOOLS), yes)
	$(MAKE) -C $(TOOLS_DIR) GEN=$(GEN) RGEN=$(RGEN) coverage CHIP_TYPE=$(CHIP_TYPE)
endif

asm_tools:
ifeq ($(BUILD_TOOLS), yes)
	$(MAKE) -C $(TOOLS_DIR) GEN=$(GEN) RGEN=$(RGEN) asm_tools
endif

llvm_tools:
	$(MAKE) -C $(TOOLS_DIR) GEN=$(GEN) RGEN=$(RGEN) LLVM_VER=$(LLVM_VER) llvm_tools

standalone:
	$(MAKE) -C $(TOOLS_DIR) GEN=$(GEN) RGEN=$(RGEN) HAS_VERILATED_CORE=$(HAS_VERILATED_CORE) standalone CHIP_TYPE=$(CHIP_TYPE)

standalone_rebuild:
	$(MAKE) -C $(TOOLS_DIR) GEN=$(GEN) RGEN=$(RGEN) HAS_VERILATED_CORE=$(HAS_VERILATED_CORE) standalone_rebuild CHIP_TYPE=$(CHIP_TYPE)

standalone_install:
	$(MAKE) -C $(TOOLS_DIR) GEN=$(GEN) RGEN=$(RGEN) HAS_VERILATED_CORE=$(HAS_VERILATED_CORE) standalone_install CHIP_TYPE=$(CHIP_TYPE) RUNNER_VERSION_FOR_TOOLS=$(RUNNER_VERSION_FOR_TOOLS)

sim_rebuild:
	$(MAKE) -C $(TOOLS_DIR) GEN=$(GEN) RGEN=$(RGEN) HAS_VERILATED_CORE=$(HAS_VERILATED_CORE) sim_rebuild CHIP_TYPE=$(CHIP_TYPE)

asm_tools_rebuild:
	$(MAKE) -C $(TOOLS_DIR) GEN=$(GEN) RGEN=$(RGEN) asm_tools_rebuild

llvm_tools_rebuild:
	$(MAKE) -C $(TOOLS_DIR) GEN=$(GEN) RGEN=$(RGEN) llvm_tools_rebuild

tools:
	$(MAKE) -C $(TOOLS_DIR) GEN=$(GEN) RGEN=$(RGEN) HAS_VERILATED_CORE=$(HAS_VERILATED_CORE) all CHIP_TYPE=$(CHIP_TYPE)

tools_rebuild:
	$(MAKE) -C $(TOOLS_DIR) GEN=$(GEN) RGEN=$(RGEN) HAS_VERILATED_CORE=$(HAS_VERILATED_CORE) rebuild CHIP_TYPE=$(CHIP_TYPE)

rebuild_hal:
	@which flex
	@which bison
	$(CP) $(TOOLS_BIN)/runner_copyright.h $(TOOLS_DIR)/hal_generator/
	$(MAKE) -C $(TOOLS_DIR)/hal_generator CHIP_TYPE=$(CHIP_TYPE) rebuild
	$(RM) $(TOOLS_DIR)/hal_generator/runner_copyright.h

xrdp_debug:
	$(MKDIR) $(PROJ_XRDP_DEBUG)
	$(CP) -rf $(PROJECT_DIR)/$(PROJ_FW_OUTPUT)/* $(PROJ_XRDP_DEBUG)/
	$(CP) -rf $(PROJECT_DIR)/$(PROJ_FW_TARGET)/* $(PROJ_XRDP_DEBUG)/

cp_output_sim:
	$(MV) $(CHIP_OUTPUT)/sim/*.h $(SIM_DIR)/hw/autogen/$(CHIP_TYPE)/
	$(MV) $(CHIP_OUTPUT)/sim/*.cpp $(SIM_DIR)/hw/autogen/$(CHIP_TYPE)/

hal_generator: rebuild_hal cp_output cp_output_sim
	echo 'done'

distclean:
	@rm -rf $(PROJECT_DIR)/$(TARGET)
	@echo "RDP DISTCLEAN DONE"


# Python library path needed for following rule (decoder)
export PYTHONPATH=$(TOOLS_DIR)/bin/python-libs

.PHONY: decoder
decoder:
	echo $(PYTHONPATH)
	python -i $(TOOLS_DIR)/bin/rxml.py  decoder $(PROJECT) $(PROJ_XML_SRC_LIST)

.PHONY: xmldocs
xmldocs:
	echo $(PYTHONPATH)
	python $(TOOLS_DIR)/bin/rxml.py  xmldocs $(PROJECT) $(PROJ_XML_SRC_LIST)
